public class WeightedQuickUnionUF{
	private int id[];
	private int size[];//size of each tree rooted at node i
	public WeightedQuickUnionUF(int N){
		id=new int[N];
		size=new int[N];
		for(int i=0;i<id.length;i++){
			id[i]=i;
			size[i]=1;
		}
	}

	public void showIDs(){
		for(int i=0;i<id.length;i++){
			System.out.println(id[i]);
		}
	}

	public boolean connected(int p, int q){
		return root(p)==root(q);
	}

	private int root(int p){
		int i=p;
		while(id[i]!=i){
//			id[i]=id[id[i]];//flatten the tree a bit	
			i=id[i];
		}
		return i;
	}

//put smaller tree under
	public void union(int p, int q){
		int rp=root(p);
		int rq=root(q);
		if(rp==rq) return;
		if(size[rp]<size[rq]){
			id[rp]=rq;
			size[rq]+=size[rp];
		}
		else{
			id[rq]=rp;
			size[rp]+=size[rq];
		}
	}


}
